// === index.jsÔºàcron/broadcast + Telegram /webhook Êü•ÂÉπ(Áõ¥Ë¶∫Ëº∏ÂÖ•) + 07:40 ÂÖ©ÊÆµÊé®Êí≠
// + ‰∏ÄÈçµÁôºÂ∏É + Áõ∏ÂÆπ /cron/morning + ËøΩËπ§Ê∏ÖÂñÆÂè£‰ª§/ÊåÅ‰πÖÂåñ + /lists APIÔºâ===

const express = require("express");
const axios = require("axios");
const fs = require("fs/promises");
const path = require("path");

const Parser = require("rss-parser");
const parser = new Parser();

// ---- ENV ----
const PORT         = process.env.PORT || 3000;
const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;              // ÂøÖÂ°´ÔºöTelegram Bot Token
const CHAT_ID      = process.env.CHAT_ID;                   // ‰Ω†ÁöÑÁßÅ‰∫∫Ë¶ñÁ™óÊàñÊé®Êí≠È†êË®≠Â∞çË±°
const CRON_KEY     = process.env.CRON_KEY || "";            // /cron/*„ÄÅ/broadcast„ÄÅ/pub„ÄÅ(POST /lists) È©óË≠â
const TZ           = process.env.TZ || "Asia/Taipei";
const PARSE_MODE   = process.env.PARSE_MODE || "Markdown";
const SYMBOLS_PATH = process.env.SYMBOLS_PATH || "./symbols.json"; // ÂÖ®Â∏ÇÂ†¥Âà•ÂêçÔºàÂèØÈÅ∏Ôºâ
const LISTS_PATH   = process.env.LISTS_PATH || "./lists.json";      // ËøΩËπ§Ê∏ÖÂñÆÊåÅ‰πÖÂåñÔºàJSON Ê™îÔºâ
// ‰∏ª‰∫∫ËàáÁæ§ÁµÑ
const OWNER_ID       = Number(process.env.OWNER_ID || 8418229161);  // ‰Ω†ÁöÑ TG user id
const GROUP_CHAT_ID  = process.env.GROUP_CHAT_ID || "-4906365799";  // Áæ§ÁµÑ chat_idÔºàË≤†ËôüÈñãÈ†≠Ôºâ

if (!TG_BOT_TOKEN) console.warn("‚ö†Ô∏è  TG_BOT_TOKEN Êú™Ë®≠ÂÆöÔºåÂ∞áÁÑ°Ê≥ïÊé®Êí≠/ÂõûË¶Ü");
if (!CHAT_ID)      console.warn("‚ö†Ô∏è  CHAT_ID Êú™Ë®≠ÂÆöÔºå/broadcast ÈúÄË¶Å body.chat_id ÊàñËá™Ë°åÊåáÂÆö");
if (!OWNER_ID)     console.warn("‚ö†Ô∏è  OWNER_ID Êú™Ë®≠ÂÆöÔºàÁôºÂ∏ÉÈôêÂà∂Â∞áÂ§±ÊïàÔºâ");
if (!GROUP_CHAT_ID)console.warn("‚ö†Ô∏è  GROUP_CHAT_ID Êú™Ë®≠ÂÆöÔºàÁôºÂ∏ÉÂà∞Áæ§ÁµÑÊúÉÂ§±ÊïóÔºâ");

const app = express();
app.use(express.json());

// ====== ÂÖ±Áî®Â∞èÂ∑•ÂÖ∑ ======
function nowStr(){ return new Date().toLocaleString("zh-TW",{ timeZone: TZ }); }
function todayDateStr(){ return new Date().toLocaleDateString("zh-TW",{ timeZone: TZ }); }
function isTradingWeekday(){
  const d = new Date(new Date().toLocaleString("en-US",{ timeZone: TZ }));
  const wd = d.getDay(); // 0 Sun ... 6 Sat
  return wd >= 1 && wd <= 5;
}

// ====== Ê®°ÊùøËÆÄÂèñ ======
async function readTemplate(name){
  const p = path.join(__dirname,"content",`${name}.txt`);
  try { const t = (await fs.readFile(p,"utf8")||"").trim(); return t||`(${name} Â∞öÁÑ°ÂÖßÂÆπ)`; }
  catch { return `(${name} Ê®°ÊùøËÆÄÂèñÂ§±ÊïóÊàñ‰∏çÂ≠òÂú®)`; }
}

// ====== ‰ªäÊó•È†≠Ê¢ùÔºàË∑ØÈÄèRSSÔºâ ======
async function fetchSnapshot() {
  const feeds = [
    "https://feeds.reuters.com/reuters/marketsNews",
    "https://feeds.reuters.com/reuters/worldNews",
    "https://feeds.reuters.com/reuters/businessNews",
    "https://feeds.reuters.com/reuters/technologyNews",
  ];
  const items = [];
  for (const url of feeds) {
    try {
      const d = await parser.parseURL(url);
      items.push(...(d.items || []).slice(0, 3).map(e => `- ${e.title}`));
    } catch (_) {}
  }
  return items.slice(0, 10).join("\n") || "- ÔºàÊö´ÁÑ°È†≠Ê¢ùÔºâ";
}

// ====== TG ÁôºÈÄÅÔºàMarkdown ‚Üí Â§±ÊïóÂõûÈÄÄÁ¥îÊñáÂ≠óÔºâ ======
async function sendTG(text, chatId, mode){
  if (!TG_BOT_TOKEN) throw new Error("TG_BOT_TOKEN not set");
  const url = `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`;
  const base = { chat_id: chatId||CHAT_ID, text, disable_web_page_preview:true };
  try {
    const { data } = await axios.post(url, { ...base, parse_mode: mode||PARSE_MODE }, { timeout: 25000 });
    return data;
  } catch (e) {
    const { data } = await axios.post(url, base, { timeout: 25000 });
    return data;
  }
}

// ====== ÈáëÈë∞È©óË≠âÔºàcron/broadcast/pub/(POST /lists) Áî®Ôºâ ======
function verifyKey(req,res){
  const key = req.headers["x-webhook-key"] || req.query.key || "";
  if (!CRON_KEY) return true;
  if (key !== CRON_KEY){ res.status(401).json({ok:false,error:"bad key"}); return false; }
  return true;
}

// ÂÅ•Â∫∑Ê™¢Êü•
app.get(["/","/health"],(_,res)=>res.send("ok"));

// ====== ÊâãÂãïÊé®Êí≠Ôºà‰øùÁïôÔºâ ======
app.post("/broadcast", async (req,res)=>{
  if(!verifyKey(req,res))return;
  const { text, chat_id, mode } = req.body||{};
  if(!text) return res.status(400).json({ ok:false, error:"text required" });
  try{ res.json({ ok:true, result: await sendTG(text, chat_id, mode) }); }
  catch(e){ console.error("broadcast error:",e?.response?.data||e.message); res.status(500).json({ ok:false, error:e?.response?.data||e.message }); }
});

// ====== ‰∏ÄÈçµÁôºÂ∏ÉÔºàPOST /pubÔºâ ======
// body: { text: "...", target: "group" | "me", mode?: "Markdown" | null }
app.post("/pub", async (req,res)=>{
  if(!verifyKey(req,res))return;
  try{
    const { text, target = "group", mode } = req.body || {};
    if (!text) return res.status(400).json({ ok:false, error:"text required" });
    const chat = (target === "me") ? CHAT_ID : GROUP_CHAT_ID;
    if (!chat) return res.status(400).json({ ok:false, error:"chat id missing" });
    const r = await sendTG(text, chat, mode || "Markdown");
    res.json({ ok:true, result:r, target });
  }catch(e){
    console.error("/pub error:", e?.response?.data||e.message);
    res.status(500).json({ ok:false, error:e?.response?.data||e.message });
  }
});

// ====== ‰Ω†ÂéüÊú¨ÂõõÂÄãÊéíÁ®ãÁöÑÁµÑÁ®øÔºà‰øùÁïôÔºâ ======
async function compose(mode){
  const header = {
    morning:"üß≠ ÊàÄËÇ°‰∏ªÂ†¥ÔΩúÁõ§ÂâçÂ∞éËà™",
    open:"üöÄ ÊàÄËÇ°‰∏ªÂ†¥ÔΩúÈñãÁõ§ÊèêÈÜí",
    noon:"‚è±Ô∏è ÊàÄËÇ°‰∏ªÂ†¥ÔΩúÂçàÁõ§Â∞èÁµê",
    close:"üìä ÊàÄËÇ°‰∏ªÂ†¥ÔΩúÊî∂Áõ§Â∞èÁµê"
  }[mode] || "üìÆ Êé®Êí≠";

  const tpl = { morning:"preopen", open:"preopen", noon:"noon", close:"close" }[mode] || "preopen";

  const [body, shot] = await Promise.all([ readTemplate(tpl), fetchSnapshot() ]);

  let text = `${header}ÔΩú${nowStr()}
‚Äî‚Äî
‰ªäÊó•È†≠Ê¢ù
${shot}

${body}

‚Äî‚Äî
Â§úËæ∞ÔºöË®òÂæóÂñùÊ∞¥ÔºåÁ¥ÄÂæãÊØîË°åÊÉÖÈáçË¶Å„ÄÇ`;
  if (text.length > 3900) text = text.slice(0, 3850) + "\n‚Ä¶ÔºàÂ∑≤Êà™Êñ∑Ôºâ";
  return text;
}

for (const mode of ["morning","open","noon","close"]){
  app.post(`/cron/${mode}`, async (req,res)=>{
    if(!verifyKey(req,res))return;
    try{ res.json({ ok:true, result: await sendTG(await compose(mode)) }); }
    catch(e){ console.error(`/cron/${mode} error:`,e?.response?.data||e.message); res.status(500).json({ ok:false, error:e?.response?.data||e.message }); }
  });
}

// ====== ÂÖ®Â∏ÇÂ†¥Êü•ÂÉπÔºö‰ª£Ëôü/ÂêçÁ®±/Âà•Âêç ======
let SYMBOL_MAP = null;
let SYMBOL_MTIME = 0;

const BUILTIN_ALIAS = Object.freeze({
  "2618":"Èï∑Ê¶ÆËà™","Èï∑Ê¶ÆËà™":"2618",
  "5905":"Âçó‰ªÅÊπñ","Âçó‰ªÅÊπñ":"5905",
  "5202":"ÂäõÊñ∞","ÂäõÊñ∞":"5202",
  "2884":"ÁéâÂ±±Èáë","ÁéâÂ±±Èáë":"2884",
  "00687B":"ÂúãÊ≥∞20Âπ¥ÁæéÂÇµ","ÂúãÊ≥∞20Âπ¥ÁæéÂÇµ":"00687B",
  "00937B":"Áæ§ÁõäÊäïË≥áÁ¥öÂÇµ","Áæ§ÁõäÊäïË≥áÁ¥öÂÇµ":"00937B",
  "2355":"Êï¨Èµ¨","Êï¨Èµ¨":"2355",
  "2374":"‰Ω≥ËÉΩ","‰Ω≥ËÉΩ":"2374",
  "1815":"ÂØåÂñ¨","ÂØåÂñ¨":"1815",
  "2438":"ÁøîËÄÄ","ÁøîËÄÄ":"2438",
  "2027":"Â§ßÊàêÈãº","Â§ßÊàêÈãº":"2027",
  "2382":"Âª£ÈÅî","Âª£ÈÅî":"2382",
  "5314":"‰∏ñÁ¥Ä","‰∏ñÁ¥Ä":"5314",
  "2330":"Âè∞Á©çÈõª","Âè∞Á©çÈõª":"2330",
  "2317":"È¥ªÊµ∑","È¥ªÊµ∑":"2317",
  "3715":"ÂÆöÁ©éÊäïÊéß","ÂÆöÁ©éÊäïÊéß":"3715",
  "4958":"ËáªÈºé-KY","ËáªÈºé-KY":"4958",
  "3230":"Èå¶Êòé","Èå¶Êòé":"3230",
  "6274":"Âè∞Ááø","Âè∞Ááø":"6274",
  "3211":"È†ÜÈÅî","È†ÜÈÅî":"3211",
  "6196":"Â∏ÜÂÆ£","Â∏ÜÂÆ£":"6196",
  "1409":"Êñ∞Á∫ñ","Êñ∞Á∫ñ":"1409",
  "2402":"ÊØÖÂòâ","ÊØÖÂòâ":"2402",
  "3402":"Êº¢Áßë","Êº¢Áßë":"3402",
});

async function loadSymbolsIfNeeded(){
  try{
    const stat = await fs.stat(SYMBOLS_PATH).catch(()=>null);
    if (!stat) { if (!SYMBOL_MAP) SYMBOL_MAP = {...BUILTIN_ALIAS}; return SYMBOL_MAP; }
    if (!SYMBOL_MAP || stat.mtimeMs !== SYMBOL_MTIME) {
      const raw = await fs.readFile(SYMBOLS_PATH,"utf8").catch(()=> "[]");
      const arr = JSON.parse(raw);
      const map = {...BUILTIN_ALIAS};
      for (const it of arr){
        if (!it || !it.code) continue;
        if (it.name) { map[it.code]=it.name; map[it.name]=it.code; }
        if (Array.isArray(it.alias)) for (const a of it.alias){ if(a){ map[a]=it.code; } }
      }
      SYMBOL_MAP = map;
      SYMBOL_MTIME = stat.mtimeMs;
    }
  }catch{
    if (!SYMBOL_MAP) SYMBOL_MAP = {...BUILTIN_ALIAS};
  }
  return SYMBOL_MAP;
}
function looksLikeCode(s){ return /^[0-9]{4,5}[A-Z]*$/.test(s.toUpperCase()); }
async function resolveSymbol(q){
  const s = String(q||"").trim();
  if (!s) return null;
  const MAP = await loadSymbolsIfNeeded();
  if (looksLikeCode(s)) {
    const name = MAP[s] || "";
    return { code:s.toUpperCase(), name: name || "" };
  }
  const code = MAP[s] || "";
  if (code) return { code, name: s };
  return null;
}
async function fetchTWQuote(code){
  const ts = Date.now();
  const urls = [
    `https://mis.twse.com.tw/stock/api/getStockInfo.jsp?ex_ch=tse_${code}.tw&json=1&_=${ts}`,
    `https://mis.twse.com.tw/stock/api/getStockInfo.jsp?ex_ch=otc_${code}.tw&json=1&_=${ts}`
  ];
  for (const url of urls){
    try{
      const { data } = await axios.get(url, { timeout: 15000, headers:{ "cache-control":"no-cache" } });
      if (data && data.msgArray && data.msgArray.length){
        const it = data.msgArray[0];
        if (it.z && it.z !== "-"){
          return {
            ok:true,
            code,
            name: it.n || "",
            open: it.o || "-",
            high: it.h || "-",
            low:  it.l || "-",
            close: it.z,
            date: it.d || new Date().toLocaleDateString("zh-TW",{ timeZone: TZ }),
            market: url.includes("tse_") ? "TWSE" : "TPEX"
          };
        }
      }
    }catch(_) {}
  }
  return { ok:false };
}

// ====== ËøΩËπ§Ê∏ÖÂñÆÔºàÈ†êË®≠ + ÊåÅ‰πÖÂåñÔºâ ======
let TRACK_SELF_DEFAULT = ["‰Ω≥ËÉΩ","Êï¨Èµ¨","ËáªÈºé-KY","Êñ∞Á∫ñ","ÂäõÊñ∞","ÂØåÂñ¨","Èå¶Êòé"];
let TRACK_MOM_DEFAULT  = ["Âè∞Ááø","È†ÜÈÅî","Â∏ÜÂÆ£","Êº¢Áßë","ÊØÖÂòâ"];

let TRACK_SELF = [...TRACK_SELF_DEFAULT];
let TRACK_MOM  = [...TRACK_MOM_DEFAULT];

async function loadLists(){
  try{
    const raw = await fs.readFile(LISTS_PATH,"utf8");
    const j = JSON.parse(raw||"{}");
    if (Array.isArray(j.self)) TRACK_SELF = [...new Set(j.self.filter(Boolean))];
    if (Array.isArray(j.mom))  TRACK_MOM  = [...new Set(j.mom.filter(Boolean))];
  }catch{ /* ÂàùÊ¨°Ê≤íÊúâÊ™îÊ°àÂ∞±Áî®È†êË®≠ */ }
}
async function saveLists(){
  const j = { self: TRACK_SELF, mom: TRACK_MOM, savedAt: nowStr() };
  await fs.writeFile(LISTS_PATH, JSON.stringify(j,null,2));
}
async function ensureLists(){
  if (!TRACK_SELF || !TRACK_MOM) { TRACK_SELF=[...TRACK_SELF_DEFAULT]; TRACK_MOM=[...TRACK_MOM_DEFAULT]; }
}

// ÂïüÂãïÊôÇÂòóË©¶ËºâÂÖ•Ê∏ÖÂñÆ
loadLists().catch(()=>{});

// ====== 07:40 ÂÖ©ÈöéÊÆµÔºöÁµÑÁ®ø ======
async function composeMorningPhase1(){
  const shot = await fetchSnapshot();
  return `${todayDateStr()} Áõ§ÂâçÂ∞éËà™ √ó Á∏ΩË¶Ω
üåç ÂúãÈöõÁõ§ËàáÊñ∞ËÅûÈáçÈªû
${shot || "ÔºàÁ®çÂæåË£úÂÖÖÔºâ"}

üè¶ ‰∏âÂ§ßÊ≥ï‰∫∫Ë≤∑Ë≥£Ë∂ÖÊéíË°åÔºà${todayDateStr()} Ââç‰∏Ä‰∫§ÊòìÊó•Ôºâ
„ÉªÂ§ñË≥áÔºö‚Äî 
„ÉªÊäï‰ø°Ôºö‚Äî
„ÉªËá™ÁáüÂïÜÔºö‚Äî

üß™ ÊàÄËÇ°‰∏ªÂ†¥ √ó ‰∫îÂ§ßÊ®°ÁµÑÂÖ±ÊåØÂàÜÊûê
„ÉªÊûóÁùøÈñéÔºö‚Äî
„ÉªÂê≥Â≤≥Â±ïÔºö‚Äî
„ÉªÊ∏∏Â∫≠ÁöìÔºö‚Äî

üß≠ Êìç‰ΩúÂª∫Ë≠∞Â∞éËà™
ÔºàÂæÖË£úÔºâ

‚ö†Ô∏è ÈñãÁõ§Ê≥®ÊÑè‰∫ãÈ†Ö
ÔºàÂæÖË£úÔºâ`;
}

async function stockLine(nameOrCode){
  const hit = await resolveSymbol(nameOrCode);
  if (!hit) return `‚Ä¢ ${nameOrCode}ÔΩúVWAPÔºö‚ÄîÔΩúÈóúÈçµÂÉπÔºö‚ÄîÔΩúÊìç‰Ωú/È¢®ÊéßÔºö‚Äî\n  ÂõõÂÉπÔºöÈñã‚Äî È´ò‚Äî ‰Ωé‚Äî Êî∂‚Äî`;
  const r = await fetchTWQuote(hit.code);
  const k = `‚Ä¢ ${hit.code} ${hit.name || nameOrCode}ÔΩúVWAPÔºö‚ÄîÔΩúÈóúÈçµÂÉπÔºö‚ÄîÔΩúÊìç‰Ωú/È¢®ÊéßÔºö‚Äî`;
  if (!r.ok) return `${k}\n  ÂõõÂÉπÔºöÈñã‚Äî È´ò‚Äî ‰Ωé‚Äî Êî∂‚Äî`;
  return `${k}\n  ÂõõÂÉπÔºöÈñã${r.open} È´ò${r.high} ‰Ωé${r.low} Êî∂${r.close}`;
}
async function composeMorningPhase2(){
  const linesSelf = await Promise.all(TRACK_SELF.map(stockLine));
  const linesMom  = await Promise.all(TRACK_MOM.map(stockLine));
  return `ÂÄãËÇ°È†êË®Ä √ó ÂõõÂÉπË°®Ôºà${todayDateStr()}Ôºâ
üìå ‰Ω†ÁöÑËøΩËπ§ËÇ°
${linesSelf.join("\n")}

üí° Â™ΩÂ™ΩËøΩËπ§ËÇ°ÔºàÂøÖÂàÜÊûêÔºâ
${linesMom.join("\n")}

Ë®ªÔºöVWAPÔºèÈóúÈçµÂÉπÔºèÊìç‰ΩúËàáÈ¢®ÊéßÁÇ∫‰Ωî‰ΩçÔºåÁ≠â‰Ω†Êèê‰æõË¶èÂâáÊàñË≥áÊñôÊ∫êÂæåËá™ÂãïÂ°´ÂÖ•„ÄÇ`;
}

// ====== 07:40 ÂÖ©ÈöéÊÆµÔºöÁ´ØÈªû ======
app.post("/cron/morning1", async (req,res)=>{
  if(!verifyKey(req,res))return;
  try{
    if (!isTradingWeekday()) return res.json({ ok:true, skipped:"weekend" });
    const text = await composeMorningPhase1();
    const r = await sendTG(text, GROUP_CHAT_ID, "Markdown"); // Âõ∫ÂÆöÁôºÁæ§ÁµÑ
    res.json({ ok:true, result:r, target: GROUP_CHAT_ID });
  }catch(e){
    console.error("/cron/morning1 error:", e?.response?.data||e.message);
    res.status(500).json({ ok:false, error:e?.response?.data||e.message });
  }
});

app.post("/cron/morning2", async (req,res)=>{
  if(!verifyKey(req,res))return;
  try{
    if (!isTradingWeekday()) return res.json({ ok:true, skipped:"weekend" });
    const text = await composeMorningPhase2();
    const previewTarget = CHAT_ID || GROUP_CHAT_ID;      // ÂÖàÁôº‰Ω†ÂÄã‰∫∫ÔºàÊ≤íÊúâÂ∞±ÁôºÁæ§Ôºâ
    const r = await sendTG(text, previewTarget, "Markdown");
    res.json({ ok:true, result:r, target: previewTarget });
  }catch(e){
    console.error("/cron/morning2 error:", e?.response?.data||e.message);
    res.status(500).json({ ok:false, error:e?.response?.data||e.message });
  }
});

// Áõ∏ÂÆπÁ´ØÈªûÔºö/cron/morningÔºà‰∏ÄÊ¨°Ëß∏ÁôºÂÖ©ÊÆµÔºâ‚Äî‚ÄîÁµ¶ËàäÁöÑ GitHub Actions Áî®
app.post("/cron/morning", async (req,res)=>{
  if(!verifyKey(req,res))return;
  try{
    if (!isTradingWeekday()) return res.json({ ok:true, skipped:"weekend" });
    const text1 = await composeMorningPhase1();
    const r1 = await sendTG(text1, GROUP_CHAT_ID, "Markdown");

    const text2 = await composeMorningPhase2();
    const previewTarget = CHAT_ID || GROUP_CHAT_ID;
    const r2 = await sendTG(text2, previewTarget, "Markdown");

    res.json({ ok:true, result:{ phase1:r1, phase2:r2 }, targets:{ phase1: GROUP_CHAT_ID, phase2: previewTarget }});
  }catch(e){
    console.error("/cron/morning error:", e?.response?.data||e.message);
    res.status(500).json({ ok:false, error:e?.response?.data||e.message });
  }
});

// ====== /listsÔºöÊèê‰æõÁµ¶ GPTs ËÆÄÔºàGETÔºâÔºèÔºàÂèØÈÅ∏ÔºâÂØ´ÔºàPOST, ÈúÄ keyÔºâ ======
app.get("/lists", async (req,res)=>{
  try{
    await ensureLists();
    res.json({ ok:true, self: TRACK_SELF, mom: TRACK_MOM, updatedAt: nowStr() });
  }catch(e){
    res.status(500).json({ ok:false, error:e?.message||"lists error" });
  }
});

app.post("/lists", async (req,res)=>{
  if(!verifyKey(req,res))return;
  try{
    const { self, mom } = req.body || {};
    if (Array.isArray(self)) TRACK_SELF = [...new Set(self.filter(Boolean))];
    if (Array.isArray(mom))  TRACK_MOM  = [...new Set(mom.filter(Boolean))];
    await saveLists().catch(()=>{});
    res.json({ ok:true, self: TRACK_SELF, mom: TRACK_MOM, savedAt: nowStr() });
  }catch(e){
    res.status(500).json({ ok:false, error:e?.message||"lists write error" });
  }
});

// ====== Telegram /webhookÔºö/menu + Êü•ÂÉπÔºàÁõ¥Ë¶∫/Âè£Ë™ûÔºâ + ÁôºÂ∏ÉÂà∞Áæ§ÔºàÂè£‰ª§Ôºâ + Ê∏ÖÂñÆÁ∂≠Ë≠∑ ======
app.post("/webhook", async (req,res)=>{
  res.sendStatus(200);
  try{
    const up = req.body || {};
    const msg = up.message || up.edited_message || up.channel_post || up.edited_channel_post;
    if (!msg?.chat?.id) return;

    const chatId = msg.chat.id;
    const text = (msg.caption || msg.text || "").trim();

    // Âè™Êúâ OWNER ÂèØÁî®„ÄåÁôºÂ∏ÉÔºö„ÄçÊääÂÖßÂÆπËΩâÁôºÂà∞Áæ§ÁµÑÔºàMarkdownÔºâ
    if (msg.from?.id === OWNER_ID && /^ÁôºÂ∏É[:Ôºö]\s*/.test(text) && GROUP_CHAT_ID){
      const payload = text.replace(/^ÁôºÂ∏É[:Ôºö]\s*/,"").trim();
      if (payload) { await sendTG(payload, GROUP_CHAT_ID, "Markdown"); }
      return;
    }

    // ==== Ê∏ÖÂñÆÁ∂≠Ë≠∑Âè£‰ª§ ====
    // È°ØÁ§∫Ê∏ÖÂñÆ
    if (/^Ê∏ÖÂñÆ($|\s)/.test(text) || text === "Ê∏ÖÂñÆ" || text === "/Ê∏ÖÂñÆ"){
      await ensureLists();
      const s =
`üìã ËøΩËπ§Ê∏ÖÂñÆÔºà${todayDateStr()}Ôºâ
ÊàëÔºö${TRACK_SELF.join("„ÄÅ") || "‚Äî"}
Â™ΩÔºö${TRACK_MOM.join("„ÄÅ") || "‚Äî"}

Áî®Ê≥ïÔºöÊ∏ÖÂñÆÂä† 2402ÔºõÊ∏ÖÂñÆÊ∏õ 2402ÔºõÊ∏ÖÂñÆÂ™ΩÂä† Âè∞ÁáøÔºõÊ∏ÖÂñÆÂ™ΩÊ∏õ È†ÜÈÅî`;
      await sendTG(s, chatId, null);
      return;
    }
    if (/^Ê∏ÖÂñÆÊàë\b/.test(text)){
      await ensureLists();
      await sendTG(`ÊàëÊ∏ÖÂñÆÔºö${TRACK_SELF.join("„ÄÅ") || "‚Äî"}`, chatId, null);
      return;
    }
    if (/^Ê∏ÖÂñÆÂ™Ω\b/.test(text)){
      await ensureLists();
      await sendTG(`Â™ΩÂ™ΩÊ∏ÖÂñÆÔºö${TRACK_MOM.join("„ÄÅ") || "‚Äî"}`, chatId, null);
      return;
    }
    // Âä†/Ê∏õÔºàÊàëÔºâ
    let m;
    if ((m = text.match(/^Ê∏ÖÂñÆÂä†\s+(.+)/))){
      const items = m[1].split(/[ ,Ôºå„ÄÅ\s]+/).map(s=>s.trim()).filter(Boolean);
      for (const it of items){
        const hit = await resolveSymbol(it);
        const disp = hit ? (hit.name || hit.code) : it;
        if (!TRACK_SELF.includes(disp)) TRACK_SELF.push(disp);
      }
      await saveLists().catch(()=>{});
      await sendTG(`‚úÖ Â∑≤Âä†ÂÖ•ÔºàÊàëÔºâÔºö${items.join("„ÄÅ")}\nÁõÆÂâçÔºö${TRACK_SELF.join("„ÄÅ")}`, chatId, null);
      return;
    }
    if ((m = text.match(/^Ê∏ÖÂñÆÊ∏õ\s+(.+)/))){
      const items = m[1].split(/[ ,Ôºå„ÄÅ\s]+/).map(s=>s.trim()).filter(Boolean);
      TRACK_SELF = TRACK_SELF.filter(x => !items.includes(x));
      await saveLists().catch(()=>{});
      await sendTG(`üóëÔ∏è Â∑≤ÁßªÈô§ÔºàÊàëÔºâÔºö${items.join("„ÄÅ")}\nÁõÆÂâçÔºö${TRACK_SELF.join("„ÄÅ") || "‚Äî"}`, chatId, null);
      return;
    }
    // Âä†/Ê∏õÔºàÂ™ΩÔºâ
    if ((m = text.match(/^Ê∏ÖÂñÆÂ™ΩÂä†\s+(.+)/))){
      const items = m[1].split(/[ ,Ôºå„ÄÅ\s]+/).map(s=>s.trim()).filter(Boolean);
      for (const it of items){
        const hit = await resolveSymbol(it);
        const disp = hit ? (hit.name || hit.code) : it;
        if (!TRACK_MOM.includes(disp)) TRACK_MOM.push(disp);
      }
      await saveLists().catch(()=>{});
      await sendTG(`‚úÖ Â∑≤Âä†ÂÖ•ÔºàÂ™ΩÂ™ΩÔºâÔºö${items.join("„ÄÅ")}\nÁõÆÂâçÔºö${TRACK_MOM.join("„ÄÅ")}`, chatId, null);
      return;
    }
    if ((m = text.match(/^Ê∏ÖÂñÆÂ™ΩÊ∏õ\s+(.+)/))){
      const items = m[1].split(/[ ,Ôºå„ÄÅ\s]+/).map(s=>s.trim()).filter(Boolean);
      TRACK_MOM = TRACK_MOM.filter(x => !items.includes(x));
      await saveLists().catch(()=>{});
      await sendTG(`üóëÔ∏è Â∑≤ÁßªÈô§ÔºàÂ™ΩÂ™ΩÔºâÔºö${items.join("„ÄÅ")}\nÁõÆÂâçÔºö${TRACK_MOM.join("„ÄÅ") || "‚Äî"}`, chatId, null);
      return;
    }

    // /start /menu
    if (/^\/(start|menu)\b/i.test(text)){
      const s = [
        "‚úÖ ÊàëÂú®ÔºÅÂèØ‰ª•Áõ¥Êé•Ëº∏ÂÖ•Ôºö",
        "‚Ä¢ `2402` Êàñ `ÊØÖÂòâ`Ôºà‰∏çÂøÖÂä†„ÄåÊü•„ÄçÔºâ",
        "‚Ä¢ Âè£Ë™ûÔºö`Âè∞Á©çÈõªÂ§öÂ∞ë`„ÄÅ`2330ËÇ°ÂÉπ`",
        "‚Ä¢ ‰πüÊîØÊè¥Ôºö`Êü• 2330`„ÄÅ`ËÇ°ÂÉπ Âè∞Á©çÈõª`",
        "",
        "üïñ 07:40Ôºö/cron/morning1ÔºàËá™ÂãïÁôºÁæ§ÔºâÔºè/cron/morning2ÔºàÂÖàÁôºÁµ¶ÊàëÁúãÔºâ",
        "üß© ËàäÁõ∏ÂÆπÔºö/cron/morningÔºàÂÖ©ÊÆµÈÉΩË∑ëÔºâ",
        "",
        "üìã Ê∏ÖÂñÆÁ∂≠Ë≠∑Ôºö",
        "‚Ä¢ Ê∏ÖÂñÆ„ÄÅÊ∏ÖÂñÆÊàë„ÄÅÊ∏ÖÂñÆÂ™Ω",
        "‚Ä¢ Ê∏ÖÂñÆÂä† 2402ÔΩúÊ∏ÖÂñÆÊ∏õ 2402",
        "‚Ä¢ Ê∏ÖÂñÆÂ™ΩÂä† Âè∞ÁáøÔΩúÊ∏ÖÂñÆÂ™ΩÊ∏õ È†ÜÈÅî",
        "",
        "üì¢ Áæ§ÁôºÂè£‰ª§ÔºàÈôêÊú¨‰∫∫ÔºâÔºö`ÁôºÂ∏ÉÔºö<Ë¶ÅÁôºÂà∞Áæ§ÁöÑÂÖ®Êñá>`",
      ].join("\n");
      return sendTG(s, chatId, "Markdown");
    }

    // === Êü•ÂÉπÂÅµÊ∏¨ÔºàÊåá‰ª§Âºè + Áõ¥Ë¶∫Âºè + Âè£Ë™ûÂºèÔºâ ===
    let q = null;

    // (A) Êåá‰ª§Âºè
    let m1 = text.match(/^\/?(Êü•ÂÉπ|ËÇ°ÂÉπ|Êü•)\s+(.+)$/);
    if (m1) q = m1[2].trim();

    // (B) Âè£Ë™û/Áõ¥Ë¶∫
    if (!q) {
      const cleaned = text
        .replace(/[Ôºå„ÄÇ,\.ÔºÅÔºü!?ÔΩû~()\[\]{}„Äê„Äë„Äå„Äç„Äé„ÄèÔºö:Ôºõ;„ÄÅ\s]/g, "")
        .replace(/(ËÇ°ÂÉπ|ÂÉπÊ†º|Â§öÂ∞ë|ÂπæÂÖÉ|ÂπæÂ°ä|Â†±ÂÉπ)$/u, "");
      if (cleaned && cleaned.length <= 12 && /^[\p{L}\p{N}A-Za-z0-9\-]+$/u.test(cleaned)) {
        q = cleaned;
      }
    }

    if (!q && (text === "Êü•ÂÉπ" || text === "/ËÇ°ÂÉπ")) {
      return sendTG("Ë´ãÁõ¥Êé•Ëº∏ÂÖ•Ôºö`2402`„ÄÅ`ÊØÖÂòâ`„ÄÅÊàñ `Âè∞Á©çÈõªÂ§öÂ∞ë`Ôºà‰πüÂèØÔºö`Êü• 2330`Ôºâ", chatId, "Markdown");
    }

    if (q){
      const hit = await resolveSymbol(q);
      if (!hit) return sendTG(`Êü•ÁÑ°Â∞çÊáâ‰ª£Ëôü/ÂêçÁ®±Ôºö„Äå${q}„Äç\nÂèØÂú® ${SYMBOLS_PATH} Âä†ÂÖ•Âà•ÂêçÔºåÊàñÁî®‰ª£ËôüÂÜçË©¶Ë©¶„ÄÇ`, chatId, null);
      const r = await fetchTWQuote(hit.code);
      if (!r.ok) return sendTG(`„Äê${hit.code} ${hit.name||""}„ÄëÊö´ÊôÇÂèñ‰∏çÂà∞Âç≥ÊôÇ/Êó•Êî∂Ë≥áÊñôÔºåÁ®çÂæåÂÜçË©¶„ÄÇ`, chatId, null);
      const line =
`„Äê${hit.code} ${hit.name || r.name}ÔΩú${r.market}„Äë ${r.date} Êî∂Ôºö*${r.close}*
(Èñã:${r.open} È´ò:${r.high} ‰Ωé:${r.low})`;
      return sendTG(line, chatId, "Markdown");
    }

    // ÂÖ∂ÂÆÉÊñáÂ≠óÂ∞±ÂõûË¶ÜÂ∑≤Êî∂Âà∞ÔºàÈÅøÂÖçÊ≤âÈªòÔºâ
    if (text) await sendTG(`Êî∂Âà∞Ôºö„Äå${text}„Äç`, chatId, null);
  }catch(e){
    console.error("/webhook error:", e?.response?.data||e.message);
  }
});

app.listen(PORT, ()=>console.log(`orbit07-webhook up on :${PORT}`));
